# fix a user, return its predition
stopifnot(length(this.user)==1) # one user at a time
yes_index  <-userhistory[this.user,]==1
this.user_class_likeli_yes<-apply(mylist$gamma[yes_index,,"yes"],2,prod)
aligned_matrix_yes<-matrix(rep(this.user_class_likeli_yes,M),ncol=num.C,nrow=M,byrow = T)
this.user.pred_yes<-(aligned_matrix_yes*mylist$gamma[,,"yes"])%*%mylist$mu
denominator_user<-this.user_class_likeli_yes %*% mylist$mu
prob_yes <-this.user.pred_yes/as.numeric(denominator_user)
return(as.integer(prob_yes>0.5))
}
mypred<-sapply(seq(N),pred_one_user,userhistory)
mypred<-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
test_index      <-which(train_1$user %in% test_1$user)
mypred          <-sapply(test_index,pred_one_user,userhistory)
mypred          <-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
colindex<-colnames(mypred) %in% colnames(test_1)
mypred<-mypred[,colindex]
first <- function(x){return(rank(x,ties.method = "first"))}
rank_score <- function(pred_mat, testset){
### Rank Score
### Input: pred_mat (predicted matrix calculated before)
###        testset (true test dataset)
### Output: The rank score of predicted value
d         <- 0.02
rank_pred <- ncol(pred_mat)+1-t(apply(pred_mat,1,first))
rank_test <- ncol(testset)+1-t(apply(testset,1,first))
logic     <- ifelse(testset - d > 0,testset - d,0)
r_a       <- apply(1/(2^((rank_pred-1)/4)) * logic,1,sum)
r_a_max   <- apply(1/(2^((rank_test-1)/4)) * logic,1,sum)
r         <- 100*sum(r_a)/sum(r_a_max)
return(r)
}
rank_score(as.matrix(mypred),as.matrix(test_1[,3:ncol(test_1)]))
# step 1 init the parameter
num.C<- 3# number of the class
M    <-ncol(train_1)-2  # number of the movies
N    <-nrow(train_1) #number of the users
M==length(colnames(train_1)[3:ncol(train_1)])
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
)) #(score,movie,class) store the probability
# step 2 Expectation
## compute the responsibilities for each user i
# fix a user
get_expectation<-function(userhistory,mu,gamma){
# input:
## userhistory N*M matrix store the user behaviour
## mu: C*1 vector
## gamma: M*C*2 array
# output:
## pi: N*C matrix
fi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
pi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
for(this.user in 1:N){
index_1<-userhistory[this.user,]==1
index_0<-userhistory[this.user,]==0
#get value of fi
for(this.class in 1:num.C){
fi[this.user,this.class]<-prod(gamma[index_1,this.class,"yes"])*prod(gamma[index_0,this.class,"no"])}
denominator <- mu%*%fi[this.user,]
# get value of pi
for(this.class in 1:num.C){
pi[this.user,this.class]<-mu[this.class]*fi[this.user,this.class]/denominator
}
}
return(pi)
}
new_pi<-get_expectation(train_1[,3:ncol(train_1)],mu,gamma)
head(new_pi)
# step 3: Maximization
maximization<-function(myuserhistory,pi,gamma){
#input: pi,user_behaviour,gamma
#output: updated gamma, updated mu
new_mu     <-apply(pi,2,mean)
row_sum_pi <-apply(pi,2,sum)
df_divide  <-matrix(rep(row_sum_pi,M),ncol=num.C,nrow=M,byrow = T)
temp_1       <-t(as.matrix(myuserhistory==1)) %*% pi
# print(temp_1)
new_gamma_yes<-temp_1/df_divide
temp_2       <-t(as.matrix(myuserhistory==0)) %*% pi
new_gamma_no <-temp_2/df_divide
gamma[,,"yes"] <-new_gamma_yes
gamma[,,"no"]  <-new_gamma_no
return(list(mu=new_mu,gamma=gamma))
}
list<-maximization(train_1[,3:ncol(train_1)],new_pi,gamma)
# list$mu
dim(list$gamma)
# step 4 iteration till convergence
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
))
userhistory<-train_1[,3:ncol(train_1)]
i=0
repeat{
i =i+1
pi    <-get_expectation(userhistory,mu,gamma)
mylist<-maximization(myuserhistory = userhistory,pi,gamma)
gamma_l1_dev      <-sum(abs(mylist$gamma-gamma))
mu_l1_dev         <-sum(abs(mylist$mu-mu))
cat("\niteration ",i,"gamma abs(diff): ", gamma_l1_dev," mu abs(diff): ",mu_l1_dev)
if(gamma_l1_dev<=10){
break
}
gamma <-mylist$gamma
mu    <-mylist$mu
}
# fix a user
pred_one_user<-function(this.user,userhistory){
# fix a user, return its predition
stopifnot(length(this.user)==1) # one user at a time
yes_index  <-userhistory[this.user,]==1
this.user_class_likeli_yes<-apply(mylist$gamma[yes_index,,"yes"],2,prod)
aligned_matrix_yes<-matrix(rep(this.user_class_likeli_yes,M),ncol=num.C,nrow=M,byrow = T)
this.user.pred_yes<-(aligned_matrix_yes*mylist$gamma[,,"yes"])%*%mylist$mu
denominator_user<-this.user_class_likeli_yes %*% mylist$mu
prob_yes <-this.user.pred_yes/as.numeric(denominator_user)
return(as.integer(prob_yes>0.5))
}
test_index      <-which(train_1$user %in% test_1$user)
mypred          <-sapply(test_index,pred_one_user,userhistory)
mypred          <-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
colindex<-colnames(mypred) %in% colnames(test_1)
mypred<-mypred[,colindex]
first <- function(x){return(rank(x,ties.method = "first"))}
rank_score <- function(pred_mat, testset){
### Rank Score
### Input: pred_mat (predicted matrix calculated before)
###        testset (true test dataset)
### Output: The rank score of predicted value
d         <- 0.02
rank_pred <- ncol(pred_mat)+1-t(apply(pred_mat,1,first))
rank_test <- ncol(testset)+1-t(apply(testset,1,first))
logic     <- ifelse(testset - d > 0,testset - d,0)
r_a       <- apply(1/(2^((rank_pred-1)/4)) * logic,1,sum)
r_a_max   <- apply(1/(2^((rank_test-1)/4)) * logic,1,sum)
r         <- 100*sum(r_a)/sum(r_a_max)
return(r)
}
rank_score(as.matrix(mypred),as.matrix(test_1[,3:ncol(test_1)]))
rank(x,ties.method = "first"))
rank(x,ties.method = "first")
rank(mypred[1,],ties.method = "first")
# fix a user
pred_one_user<-function(this.user,userhistory){
# fix a user, return its predition
stopifnot(length(this.user)==1) # one user at a time
yes_index  <-userhistory[this.user,]==1
this.user_class_likeli_yes<-apply(mylist$gamma[yes_index,,"yes"],2,prod)
aligned_matrix_yes<-matrix(rep(this.user_class_likeli_yes,M),ncol=num.C,nrow=M,byrow = T)
this.user.pred_yes<-(aligned_matrix_yes*mylist$gamma[,,"yes"])%*%mylist$mu
denominator_user<-this.user_class_likeli_yes %*% mylist$mu
prob_yes <-this.user.pred_yes/as.numeric(denominator_user)
return(prob_yes)
}
test_index      <-which(train_1$user %in% test_1$user)
mypred          <-sapply(test_index,pred_one_user,userhistory)
mypred          <-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
colindex<-colnames(mypred) %in% colnames(test_1)
mypred<-mypred[,colindex]
first <- function(x){return(rank(x,ties.method = "first"))}
rank_score <- function(pred_mat, testset){
### Rank Score
### Input: pred_mat (predicted matrix calculated before)
###        testset (true test dataset)
### Output: The rank score of predicted value
d         <- 0.02
rank_pred <- ncol(pred_mat)+1-t(apply(pred_mat,1,first))
rank_test <- ncol(testset)+1-t(apply(testset,1,first))
logic     <- ifelse(testset - d > 0,testset - d,0)
r_a       <- apply(1/(2^((rank_pred-1)/4)) * logic,1,sum)
r_a_max   <- apply(1/(2^((rank_test-1)/4)) * logic,1,sum)
r         <- 100*sum(r_a)/sum(r_a_max)
return(r)
}
rank_score(as.matrix(mypred),as.matrix(test_1[,3:ncol(test_1)]))
# step 1 init the parameter
num.C<- 4# number of the class
M    <-ncol(train_1)-2  # number of the movies
N    <-nrow(train_1) #number of the users
M==length(colnames(train_1)[3:ncol(train_1)])
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
)) #(score,movie,class) store the probability
# step 2 Expectation
## compute the responsibilities for each user i
# fix a user
get_expectation<-function(userhistory,mu,gamma){
# input:
## userhistory N*M matrix store the user behaviour
## mu: C*1 vector
## gamma: M*C*2 array
# output:
## pi: N*C matrix
fi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
pi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
for(this.user in 1:N){
index_1<-userhistory[this.user,]==1
index_0<-userhistory[this.user,]==0
#get value of fi
for(this.class in 1:num.C){
fi[this.user,this.class]<-prod(gamma[index_1,this.class,"yes"])*prod(gamma[index_0,this.class,"no"])}
denominator <- mu%*%fi[this.user,]
# get value of pi
for(this.class in 1:num.C){
pi[this.user,this.class]<-mu[this.class]*fi[this.user,this.class]/denominator
}
}
return(pi)
}
new_pi<-get_expectation(train_1[,3:ncol(train_1)],mu,gamma)
head(new_pi)
temp_1       <-t(as.matrix(myuserhistory==1)) %*% pi
# step 3: Maximization
maximization<-function(myuserhistory,pi,gamma){
#input: pi,user_behaviour,gamma
#output: updated gamma, updated mu
new_mu     <-apply(pi,2,mean)
row_sum_pi <-apply(pi,2,sum)
df_divide  <-matrix(rep(row_sum_pi,M),ncol=num.C,nrow=M,byrow = T)
temp_1       <-t(as.matrix(myuserhistory==1)) %*% pi
# print(temp_1)
new_gamma_yes<-temp_1/df_divide
temp_2       <-t(as.matrix(myuserhistory==0)) %*% pi
new_gamma_no <-temp_2/df_divide
gamma[,,"yes"] <-new_gamma_yes
gamma[,,"no"]  <-new_gamma_no
return(list(mu=new_mu,gamma=gamma))
}
list<-maximization(train_1[,3:ncol(train_1)],new_pi,gamma)
# list$mu
dim(list$gamma)
gamma_l1_dev      <-sum(abs(mylist$gamma-gamma))
# step 4 iteration till convergence
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
))
userhistory<-train_1[,3:ncol(train_1)]
i=0
repeat{
i =i+1
pi    <-get_expectation(userhistory,mu,gamma)
mylist<-maximization(myuserhistory = userhistory,pi,gamma)
gamma_l1_dev      <-sum(abs(mylist$gamma-gamma))
mu_l1_dev         <-sum(abs(mylist$mu-mu))
cat("\niteration ",i,"gamma abs(diff): ", gamma_l1_dev," mu abs(diff): ",mu_l1_dev)
if(gamma_l1_dev<=10){
break
}
gamma <-mylist$gamma
mu    <-mylist$mu
}
# fix a user
pred_one_user<-function(this.user,userhistory){
# fix a user, return its predition
stopifnot(length(this.user)==1) # one user at a time
yes_index  <-userhistory[this.user,]==1
this.user_class_likeli_yes<-apply(mylist$gamma[yes_index,,"yes"],2,prod)
aligned_matrix_yes<-matrix(rep(this.user_class_likeli_yes,M),ncol=num.C,nrow=M,byrow = T)
this.user.pred_yes<-(aligned_matrix_yes*mylist$gamma[,,"yes"])%*%mylist$mu
denominator_user<-this.user_class_likeli_yes %*% mylist$mu
prob_yes <-this.user.pred_yes/as.numeric(denominator_user)
return(prob_yes)
}
test_index      <-which(train_1$user %in% test_1$user)
mypred          <-sapply(test_index,pred_one_user,userhistory)
mypred          <-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
colindex<-colnames(mypred) %in% colnames(test_1)
mypred<-mypred[,colindex]
first <- function(x){return(rank(x,ties.method = "first"))}
rank_score <- function(pred_mat, testset){
### Rank Score
### Input: pred_mat (predicted matrix calculated before)
###        testset (true test dataset)
### Output: The rank score of predicted value
d         <- 0.02
rank_pred <- ncol(pred_mat)+1-t(apply(pred_mat,1,first))
rank_test <- ncol(testset)+1-t(apply(testset,1,first))
logic     <- ifelse(testset - d > 0,testset - d,0)
r_a       <- apply(1/(2^((rank_pred-1)/4)) * logic,1,sum)
r_a_max   <- apply(1/(2^((rank_test-1)/4)) * logic,1,sum)
r         <- 100*sum(r_a)/sum(r_a_max)
return(r)
}
rank_score(as.matrix(mypred),as.matrix(test_1[,3:ncol(test_1)]))
# step 1 init the parameter
num.C<- 5# number of the class
M    <-ncol(train_1)-2  # number of the movies
N    <-nrow(train_1) #number of the users
M==length(colnames(train_1)[3:ncol(train_1)])
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
)) #(score,movie,class) store the probability
# step 2 Expectation
## compute the responsibilities for each user i
# fix a user
get_expectation<-function(userhistory,mu,gamma){
# input:
## userhistory N*M matrix store the user behaviour
## mu: C*1 vector
## gamma: M*C*2 array
# output:
## pi: N*C matrix
fi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
pi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
for(this.user in 1:N){
index_1<-userhistory[this.user,]==1
index_0<-userhistory[this.user,]==0
#get value of fi
for(this.class in 1:num.C){
fi[this.user,this.class]<-prod(gamma[index_1,this.class,"yes"])*prod(gamma[index_0,this.class,"no"])}
denominator <- mu%*%fi[this.user,]
# get value of pi
for(this.class in 1:num.C){
pi[this.user,this.class]<-mu[this.class]*fi[this.user,this.class]/denominator
}
}
return(pi)
}
new_pi<-get_expectation(train_1[,3:ncol(train_1)],mu,gamma)
head(new_pi)
# step 3: Maximization
maximization<-function(myuserhistory,pi,gamma){
#input: pi,user_behaviour,gamma
#output: updated gamma, updated mu
new_mu     <-apply(pi,2,mean)
row_sum_pi <-apply(pi,2,sum)
df_divide  <-matrix(rep(row_sum_pi,M),ncol=num.C,nrow=M,byrow = T)
temp_1       <-t(as.matrix(myuserhistory==1)) %*% pi
# print(temp_1)
new_gamma_yes<-temp_1/df_divide
temp_2       <-t(as.matrix(myuserhistory==0)) %*% pi
new_gamma_no <-temp_2/df_divide
gamma[,,"yes"] <-new_gamma_yes
gamma[,,"no"]  <-new_gamma_no
return(list(mu=new_mu,gamma=gamma))
}
list<-maximization(train_1[,3:ncol(train_1)],new_pi,gamma)
# list$mu
dim(list$gamma)
# step 4 iteration till convergence
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
))
userhistory<-train_1[,3:ncol(train_1)]
i=0
repeat{
i =i+1
pi    <-get_expectation(userhistory,mu,gamma)
mylist<-maximization(myuserhistory = userhistory,pi,gamma)
gamma_l1_dev      <-sum(abs(mylist$gamma-gamma))
mu_l1_dev         <-sum(abs(mylist$mu-mu))
cat("\niteration ",i,"gamma abs(diff): ", gamma_l1_dev," mu abs(diff): ",mu_l1_dev)
if(gamma_l1_dev<=10){
break
}
gamma <-mylist$gamma
mu    <-mylist$mu
}
# fix a user
pred_one_user<-function(this.user,userhistory){
# fix a user, return its predition
stopifnot(length(this.user)==1) # one user at a time
yes_index  <-userhistory[this.user,]==1
this.user_class_likeli_yes<-apply(mylist$gamma[yes_index,,"yes"],2,prod)
aligned_matrix_yes<-matrix(rep(this.user_class_likeli_yes,M),ncol=num.C,nrow=M,byrow = T)
this.user.pred_yes<-(aligned_matrix_yes*mylist$gamma[,,"yes"])%*%mylist$mu
denominator_user<-this.user_class_likeli_yes %*% mylist$mu
prob_yes <-this.user.pred_yes/as.numeric(denominator_user)
return(prob_yes)
}
```{r}
test_index      <-which(train_1$user %in% test_1$user)
mypred          <-sapply(test_index,pred_one_user,userhistory)
mypred          <-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
colindex<-colnames(mypred) %in% colnames(test_1)
mypred<-mypred[,colindex]
first <- function(x){return(rank(x,ties.method = "first"))}
rank_score <- function(pred_mat, testset){
### Rank Score
### Input: pred_mat (predicted matrix calculated before)
###        testset (true test dataset)
### Output: The rank score of predicted value
d         <- 0.02
rank_pred <- ncol(pred_mat)+1-t(apply(pred_mat,1,first))
rank_test <- ncol(testset)+1-t(apply(testset,1,first))
logic     <- ifelse(testset - d > 0,testset - d,0)
r_a       <- apply(1/(2^((rank_pred-1)/4)) * logic,1,sum)
r_a_max   <- apply(1/(2^((rank_test-1)/4)) * logic,1,sum)
r         <- 100*sum(r_a)/sum(r_a_max)
return(r)
}
rank_score(as.matrix(mypred),as.matrix(test_1[,3:ncol(test_1)]))
# step 1 init the parameter
num.C<- 19# number of the class
M    <-ncol(train_1)-2  # number of the movies
N    <-nrow(train_1) #number of the users
M==length(colnames(train_1)[3:ncol(train_1)])
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
)) #(score,movie,class) store the probability
# step 2 Expectation
## compute the responsibilities for each user i
# fix a user
get_expectation<-function(userhistory,mu,gamma){
# input:
## userhistory N*M matrix store the user behaviour
## mu: C*1 vector
## gamma: M*C*2 array
# output:
## pi: N*C matrix
fi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
pi     <-matrix(rep(NA,num.C*N),ncol=num.C,nrow=N)
for(this.user in 1:N){
index_1<-userhistory[this.user,]==1
index_0<-userhistory[this.user,]==0
#get value of fi
for(this.class in 1:num.C){
fi[this.user,this.class]<-prod(gamma[index_1,this.class,"yes"])*prod(gamma[index_0,this.class,"no"])}
denominator <- mu%*%fi[this.user,]
# get value of pi
for(this.class in 1:num.C){
pi[this.user,this.class]<-mu[this.class]*fi[this.user,this.class]/denominator
}
}
return(pi)
}
new_pi<-get_expectation(train_1[,3:ncol(train_1)],mu,gamma)
head(new_pi)
# step 4 iteration till convergence
mu         <-rdirichlet(1, rep(1,num.C))# store the vector of probability for a user belonging to a class c
gamma      <-array(rdirichlet(M*num.C,c(1,1)),dim=c(M,num.C,2),
dimnames = list(website=colnames(train_1)[3:ncol(train_1)], # M
class=seq(1:num.C),
visited=c("yes","no")# 2
))
userhistory<-train_1[,3:ncol(train_1)]
i=0
repeat{
i =i+1
pi    <-get_expectation(userhistory,mu,gamma)
mylist<-maximization(myuserhistory = userhistory,pi,gamma)
gamma_l1_dev      <-sum(abs(mylist$gamma-gamma))
mu_l1_dev         <-sum(abs(mylist$mu-mu))
cat("\niteration ",i,"gamma abs(diff): ", gamma_l1_dev," mu abs(diff): ",mu_l1_dev)
if(gamma_l1_dev<=10){
break
}
gamma <-mylist$gamma
mu    <-mylist$mu
}
# fix a user
pred_one_user<-function(this.user,userhistory){
# fix a user, return its predition
stopifnot(length(this.user)==1) # one user at a time
yes_index  <-userhistory[this.user,]==1
this.user_class_likeli_yes<-apply(mylist$gamma[yes_index,,"yes"],2,prod)
aligned_matrix_yes<-matrix(rep(this.user_class_likeli_yes,M),ncol=num.C,nrow=M,byrow = T)
this.user.pred_yes<-(aligned_matrix_yes*mylist$gamma[,,"yes"])%*%mylist$mu
denominator_user<-this.user_class_likeli_yes %*% mylist$mu
prob_yes <-this.user.pred_yes/as.numeric(denominator_user)
return(prob_yes)
}
test_index      <-which(train_1$user %in% test_1$user)
mypred          <-sapply(test_index,pred_one_user,userhistory)
mypred          <-t(mypred)
colnames(mypred)<-colnames(train_1)[3:ncol(train_1)]
colindex<-colnames(mypred) %in% colnames(test_1)
mypred<-mypred[,colindex]
first <- function(x){return(rank(x,ties.method = "first"))}
rank_score <- function(pred_mat, testset){
### Rank Score
### Input: pred_mat (predicted matrix calculated before)
###        testset (true test dataset)
### Output: The rank score of predicted value
d         <- 0.02
rank_pred <- ncol(pred_mat)+1-t(apply(pred_mat,1,first))
rank_test <- ncol(testset)+1-t(apply(testset,1,first))
logic     <- ifelse(testset - d > 0,testset - d,0)
r_a       <- apply(1/(2^((rank_pred-1)/4)) * logic,1,sum)
r_a_max   <- apply(1/(2^((rank_test-1)/4)) * logic,1,sum)
r         <- 100*sum(r_a)/sum(r_a_max)
return(r)
}
rank_score(as.matrix(mypred),as.matrix(test_1[,3:ncol(test_1)]))
